// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int length, bufferLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        let buffer = null;
        if (maxLength > 0) {
            let buffer = Array.new(maxLength);
        }
        let length = 0;
        let bufferLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do buffer.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < length) {
            return buffer[j];
        }
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < length) {
            let buffer[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~(length = bufferLength)) {
            let buffer[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }

        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, ch;
        var boolean negate;

        if (length = 0) {
            return 0;
        }

        let ch = charAt(0);
        if (ch = 45) {
            let negate = true;
            let i = 1;
        }
        let ch = charAt(1);

        while (ch > 47 & ch < 58 & i < length) {
            let ch = charAt(i);
            let value = (value * 10) + (ch - 48);
            let i = i + 1;
        }

        if (negate) {
            let value = -value;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
var int divisor, ch;

        let length = 0;

        if (j < 0) {
            do appendChar(45);
            let j = -j;
        }

        let divisor = 10000;

        while (divisor > j) {
            let divisor = divisor / 10;
        }

        while (j > 0) {
            let ch = j / divisor;
            do appendChar(ch + 48);
            let j = j - (ch * divisor);
            let divisor = divisor / 10;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 129;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 34;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 128;
    }
}
