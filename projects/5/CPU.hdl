// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // a register
    // write to a for A instructions
    Not(in=instruction[15], out=isA);
    // write to a for destination A
    Or(a=isA, b=instruction[5], out=loadA);
    Mux16(a=alu, b=instruction, sel=isA, out=inputA);
    Register(in=inputA, load=loadA, out=a, out[0..14]=addressM);
    // d register
    // write to d for destination D
    And(a=instruction[15], b=instruction[4], out=loadD);
    Register(in=alu, load=loadD, out=d);

    // write to memory for destination M
    And(a=instruction[15], b=instruction[3], out=writeM);

    And(a=instruction[15], b=instruction[12], out=useM);

    // use A if a == 0, else use M
    Mux16(a=a, b=inM, sel=useM, out=y);

    ALU(x=d, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=alu, out=outM, zr=zr, ng=ng);

    And(a=instruction[2], b=ng, out=jlt);
    And(a=instruction[1], b=zr, out=jeq);
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=pos);
    And(a=instruction[0], b=pos, out=jgt);
    Or8Way(in[0]=jlt, in[1]=jeq, in[2]=jgt, out=jmp);
    And(a=instruction[15], b=jmp, out=loadPc);
    Not(in=loadPc, out=noInc);

    PC(in=a, load=loadPc, inc=noInc, reset=reset, out[0..14]=pc);
}
